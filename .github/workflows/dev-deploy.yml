name: Deploy
on:
  push:
    branches: [dev] # main 브랜치에 push 발생하면 트리거

jobs:
  deploy:
    runs-on: ubuntu-latest # ubuntu 최신 버전 환경에서 실행

    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.2
        with:
          node-version: lts/Hydrogen

      - name: make .env
        run: |
          touch ./.env # application.yml 생성
          echo "${{ secrets.ENV_DEV }}" > ./application.yml # github actions에서 설정한 값을 application.yml 파일에 쓰기

      - name: Cache node modules
        uses: actions/cache@v2.1.8
        id: cache
        with:
          path: node_modules
          key: npm-packages-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build
        run: npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PWD }}

      - name: Docker build & push
        run: |
          docker build -f Dockerfile.dev -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

      - name: Pull and restart Docker Container
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          script: |
            sudo docker rm -f ime-front-dev
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
            docker run -d -p 80:80 --name ime-front-dev ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}